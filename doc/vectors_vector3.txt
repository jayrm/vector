vector3
=======

type vector3
------------

	type vector3
		union
			type
				x as real
				y as real
				z as real
			end type
			e(0 to 2) as real
		end union
	end type

	Vector components can be access through either the named
	fields x, y and z.  Or through the element array e().


Construction/Initialization
---------------------------

	dim {r} = (x, y, z)

	Set a vector {r} to component values (x, y, z) when
	declaring the variable:
		r.x = x
		r.y = y
		r.z = z

	Example:
		#include "vector3.bi"
		using vectors
		dim r as vector3 = (1, 2, 3)
		print r

	Output:
		(1, 2, 3)


{r}.set( x, y )
---------------

	{r} = (x, y)

	Set a vector {r} to component values (x, y, z)
		r.x = x
		r.y = y
		r.z = z

	Example:
		#include "vector3.bi"
		using vectors
		dim r as vector3
		r.set(1, 2, 3)
		print r

	Output:
		(1, 2, 3)


Operator let (assignment)
-------------------------

	{r} = {a}

	Set a vector {r} to component values (x, y, z)
		r.x = x
		r.y = y
		r.z = z

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3, r as vector3
		a.set(1, 2, 3)
		r = a
		print r

	Output:
		(1, 2, 3)


Operator + ( vector3, vector3 ) (addition)
-------------------------------------------

	{r} = {a} + {b}

	Add vector {a} to vector {b} and return in {r}
		r.x = a.x + b.x
		r.y = a.y + b.y
		r.z = a.z + b.z

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (5, 7, 11)
		dim r as vector3
		r = a + b
		print r

	Output:
		(6, 9, 14)


Operator += ( vector3 ) (addition and assignement)
--------------------------------------

	{r} += {a}

	Add vector {a} to vector {r} and return in {r}
		r.x += a.x
		r.y += a.y
		r.z += a.z

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (5, 7, 11)
		dim r as vector3
		r += a
		print r
		r += b
		print r

	Output:
		(1, 2, 3)
		(6, 9, 14)


Operator - ( vector3, vector3 ) (subtraction)
------------------------

	{r} = {a} - {b}

	subtract vector {a} from vector {b} and return in {r}
		r.x = a.x - b.x
		r.y = a.y - b.y
		r.z = a.z - b.z

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (5, 7, 11)
		dim r as vector3
		r = a - b
		print r

	Output:
		(-4, -5, -8)


Operator -= ( vector3 ) (subtraction and assignement)
-----------------------------------------

	{r} -= {a}

	Subtract vector {a} from vector {r} and return in {r}
		r.x -= a.x
		r.y -= a.y
		r.z -= a.z

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (5, 7, 11)
		dim r as vector3
		r -= a
		print r
		r -= b
		print r

	Output:
		(-1, -2, -3)
		(-6, -9, -14)



Operator *= (scalar multiplication and assignment)
--------------------------------------------------

	{r} *= k

	Multiply vector {r} by scalar k and return in {r}
		r.x *= k
		r.y *= k
		r.z *= k

	Example:
		#include "vector3.bi"
		using vectors
		dim r as vector3 = (1, 2, 3)
		r *= -3
		print r

	Output:
		(-3, -6, -9)


Operator /= (scalar multiplication and assignment
-------------------------------------------------

	{r} /= k

	Divide vector {r} by scalar k and return in {r}
		r.x /= k
		r.y /= k
		r.z /= k

	Example:
		#include "vector3.bi"
		using vectors
		dim r as vector3 = (4, -6, 12)
		r /= 2
		print r

	Output:
		(2, -3, 6)


{r}.magnitude
-------------

	d = | {a} |

	Compute the magnitude of {r}
		d = sqr( r.x ^ 2 + r.y ^ 2 + r.z ^ 2 )

	Example:
		#include "vector3.bi"
		using vectors
		dim r as vector3 = (2, 3, 6)
		dim d as real
		d = r.magnitude
		print "r   = "; r
		print "|r| = "; d

	Output:
		r   = (2, 3, 6)
		|r| = 7


{r}.magnitude2
--------------

	d = | {a} | ^ 2

	Compute the magnitude of {r} squared
		d = r.x ^ 2 + r.y ^ 2 + r.z ^ 2

	Example:
		#include "vector3.bi"
		using vectors
		dim r as vector3 = (2, 3, 6)
		dim d as real
		d = r.magnitude2
		print "r   = "; r
		print "|r| = "; d

	Output:
		r   = (2, 3, 6)
		|r| = 49

{r}.distance
------------

	d = | {b} - {r} |

	Compute the scalar distance from {r} to {b}
		d = sqr( (b.x - r.x) ^ 2 + (b.y - r.y) ^ 2 + (b.z - r.z) ^ 2 )

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (4, 6, 15)
		print a.distance( b )

	Output:
		 13


{r}.distance2
-------------

	d = | {b} - {r} |

	Compute the scalar distance from {r} to {b} squared
		d = (b.x - r.x) ^ 2 + (b.y - r.y) ^ 2 + (b.z - r.z) ^ 2

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (4, 6, 15)
		print a.distance2( b )

	Output:
		 169

		
{r}.unit
--------

	{r} = {a} / |{a}|

	Returns the unit vector {a} in {r}.  if {a} is (0, 0, 0) then
	the	zero vector is returned.

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim r as vector3
		r = a.unit
		print r
	
	Output:
		(0.2672612, 0.5345225, 0.8017837)


{r}.normalize
-------------

	{r} = {r} / |{r}|

	Returns the unit vector {r} in {r}.  if {r} is (0, 0, 0) then 
	the	zero vector is returned.

	Example:
		#include "vector3.bi"
		using vectors
		dim r as vector3 = (1, 2, 3)
		r.normalize
		print r
	
	Output:
		(0.2672612, 0.5345225, 0.8017837)


{r}.selfop_neg
--------------

	{r} = -{r}

	Returns negative of vector {r} in {r}

	Example:
		#include "vector3.bi"
		using vectors
		dim r as vector3 = (1, 2, 3)
		r.selfop_neg
		print r
	
	Output:
		(-1, -2, -3)

		
{r}.selfop_zero
---------------

	{r} = (0, 0)

	{r} = -{r}

	Sets {r} to the zero vector.

	Example:
		#include "vector3.bi"
		using vectors
		dim r as vector3 = (1, 2, 3)
		r.selfop_zero
		print r
	
	Output:
		(0, 0, 0)


{r}.cast() as string
--------------------

	cstr( {r} )

	Converts vector {r} to a string.

	Example:
		#include "vector3.bi"
		using vectors
		dim r as vector3 = (1, 2, 3)
		dim s as string = r
		print s

	Output:
		(1, 2, 3)


Operator - (Negative)
---------------------

	{r} = -{a}

	Returns negative of vector {a} in {r}

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim r as vector3
		r = -a
		print r
	
	Output:
		(-1, -2, -3)
		


Operator * ( vector3, vector3 ) (Dot Product)
---------------------------------------------

	d = {a} . {b}

	Compute the scalar dot product of {a} dot {b}.
		d = a.x * b.x + a.y * b.y

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (5, 7, 11)
		dim d as real
		d = a * b
		print d
	
	Output:
		 52
