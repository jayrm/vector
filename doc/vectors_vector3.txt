vector3
=======

type vector3
------------

	type vector3
		union
			type
				x as real
				y as real
				z as real
			end type
			e(0 to 2) as real
		end union
	end type

	Vector components can be access through either the named
	fields x, y and z.  Or through the element array e().


Construction
------------

	Create a vector

		dim {v}

	vector data type uses a default and built-in contructor.
	When the variable is defined, components default to zero
	values.
		v.x = 0
		v.y = 0
		v.z = 0

	Example:
		#include "vector3.bi"
		using vectors
		dim v as vector3
		print v

	Output:
		(0, 0, 0)


Initialization
--------------

	Initialize a vector with component values when it is created

		dim {v} = (x, y, z)

	Set a vector {v} to component values (x, y) when declaring
	the variable:
		v.x = x
		v.y = y
		v.z = z

	Example:
		#include "vector3.bi"
		using vectors
		dim v as vector3 = (1, 2, 3)
		print v

	Output:
		(1, 2, 3)


{v}.Set( x, y )
---------------

	Set vector components

		{v} = (x, y)

	Set a vector {v} to component values (x, y, z)
		v.x = x
		v.y = y
		v.z = z

	Example:
		#include "vector3.bi"
		using vectors
		dim v as vector3
		v.set(1, 2, 3)
		print v

	Output:
		(1, 2, 3)


Operator let ( vector3 )
------------------------

	Assignment operator '='

		{v} = {a}

	Set a vector {v} to component values (x, y, z)
		v.x = x
		v.y = y
		v.z = z

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3, v as vector3
		a.set(1, 2, 3)
		v = a
		print v

	Output:
		(1, 2, 3)


Operator + ( vector3, vector3 )
-------------------------------

	Addition binary operator '+'

		{v} = {a} + {b}

	Add vector {a} to vector {b} and return in {v}
		v.x = a.x + b.x
		v.y = a.y + b.y
		v.z = a.z + b.z

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (5, 7, 11)
		dim v as vector3
		v = a + b
		print v

	Output:
		(6, 9, 14)


Operator += ( vector3 )
-----------------------

	Addition and assignment operator '+='

		{v} += {a}

	Add vector {a} to vector {v} and return in {v}
		v.x += a.x
		v.y += a.y
		v.z += a.z

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (5, 7, 11)
		dim v as vector3
		v += a
		print v
		v += b
		print v

	Output:
		(1, 2, 3)
		(6, 9, 14)


Operator - ( vector3, vector3 )
-------------------------------

	Subtraction binary operator '-'

		{v} = {a} - {b}

	subtract vector {a} from vector {b} and return in {v}
		v.x = a.x - b.x
		v.y = a.y - b.y
		v.z = a.z - b.z

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (5, 7, 11)
		dim v as vector3
		v = a - b
		print v

	Output:
		(-4, -5, -8)


Operator -= ( vector3 )
-----------------------

	Subtraction and assignment operator '-='

		{v} -= {a}

	Subtract vector {a} from vector {v} and return in {v}
		v.x -= a.x
		v.y -= a.y
		v.z -= a.z

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (5, 7, 11)
		dim v as vector3
		v -= a
		print v
		v -= b
		print v

	Output:
		(-1, -2, -3)
		(-6, -9, -14)



Operator * ( scalar, vector3 )
------------------------------

	Multiply (scale) vector by scalar binary operator '*'

		{v} = k * {a}

	Multiply vector {a} by scalar k and return in {v}
		v.x = k * a.x
		v.y = k * a.y
		v.z = k * a.z

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim v as vector3
		v = -3 * a
		print v

	Output:
		(-3, -6, -9)


Operator * ( vector3, scalar )
------------------------------

	Multiply (scale) vector by scalar binary operator '*'

		{v} = {a} * k

	Multiply vector {a} by scalar k and return in {v}
		v.x = k * a.x
		v.y = k * a.y
		v.z = k * a.z

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim v as vector3
		v = a * -3
		print v

	Output:
		(-3, -6, -9)


Operator *= ( scalar )
----------------------

	Multiply (scale) and assignment operator '*='

		{v} *= k

	Multiply vector {v} by scalar k and return in {v}
		v.x *= k
		v.y *= k
		v.z *= k

	Example:
		#include "vector3.bi"
		using vectors
		dim v as vector3 = (1, 2, 3)
		v *= -3
		print v

	Output:
		(-3, -6, -9)


Operator / ( vector3, scalar )
------------------------------

	Divide (scale) vector binary operator '/'
	
		{v} /= k

	Divide vector {a} by scalar k and return in {v}
		v.x = a.x / k
		v.y = a.x / k
		v.z = a.x / k

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (4, -6, 12)
		dim v as vector3
		v = a / 2
		print v

	Output:
		(2, -3, 6)


Operator /= ( scalar )
----------------------

	Divide (scale) and assignment operator '/='

		{v} /= k

	Divide vector {v} by scalar k and return in {v}
		v.x /= k
		v.y /= k
		v.z /= k

	Example:
		#include "vector3.bi"
		using vectors
		dim v as vector3 = (4, -6, 12)
		v /= 2
		print v

	Output:
		(2, -3, 6)


{v}.magnitude
-------------

	Return the magnitude of a vector

		d = | {a} |

	Compute the magnitude (length) of {v}
		d = sqr( v.x ^ 2 + v.y ^ 2 + v.z ^ 2 )

	Example:
		#include "vector3.bi"
		using vectors
		dim v as vector3 = (2, 3, 6)
		dim d as real
		d = v.magnitude
		print "v   = "; v
		print "|v| = "; d

	Output:
		v   = (2, 3, 6)
		|v| =  7


{v}.magnitude2
--------------

	Return the magnitude squared of a vector

		d = | {a} | ^ 2

	Compute the magnitude of {v} squared
		d = v.x ^ 2 + v.y ^ 2 + v.z ^ 2

	Example:
		#include "vector3.bi"
		using vectors
		dim v as vector3 = (2, 3, 6)
		dim d as real
		d = v.magnitude2
		print "v   = "; v
		print "|v| = "; d

	Output:
		v   = (2, 3, 6)
		|v| =  49

{v}.distance( vector3 )
-----------------------

	Return the distance between two vectors

		d = | {b} - {v} |

	Compute the scalar distance from {v} to {b}
		d = sqr( (b.x - v.x) ^ 2 + (b.y - v.y) ^ 2 + (b.z - v.z) ^ 2 )

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (4, 6, 15)
		print a.distance( b )

	Output:
		 13


{v}.distance2( vector3 )
------------------------

	Return the distance squared between two vectors

		d = | {b} - {v} |

	Compute the scalar distance from {v} to {b} squared
		d = (b.x - v.x) ^ 2 + (b.y - v.y) ^ 2 + (b.z - v.z) ^ 2

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (4, 6, 15)
		print a.distance2( b )

	Output:
		 169

		
{v}.unit( vector3 )
-------------------

	Return the unit vector

		{v} = {a} / |{a}|

	Returns the unit vector {a} in {v}.  if {a} is (0, 0, 0) then
	the	zero vector is returned.

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim v as vector3
		v = a.unit
		print v
	
	Output:
		(0.2672612, 0.5345225, 0.8017837)


{v}.normalize
-------------

	Normalize a vector

		{v} = {v} / |{v}|

	Returns the unit vector {v} in {v}.  if {v} is (0, 0, 0) then 
	the	zero vector is returned.

	Example:
		#include "vector3.bi"
		using vectors
		dim v as vector3 = (1, 2, 3)
		v.normalize
		print v
	
	Output:
		(0.2672612, 0.5345225, 0.8017837)


{v}.selfop_neg
--------------

	Negative of a vector

		{v} = -{v}

	Returns negative of vector {v} in {v}

	Example:
		#include "vector3.bi"
		using vectors
		dim v as vector3 = (1, 2, 3)
		v.selfop_neg
		print v
	
	Output:
		(-1, -2, -3)

		
{v}.selfop_zero
---------------

	Zero a vector	

		{v} = (0, 0)

	Sets {v} to the zero vector.
		v.x = 0
		v.y = 0
		v.z = 0

	Example:
		#include "vector3.bi"
		using vectors
		dim v as vector3 = (1, 2, 3)
		v.selfop_zero
		print v
	
	Output:
		(0, 0, 0)


{v}.cast() as string
--------------------

	String representation of a vector

		cstr( {v} )

	Converts vector {v} to a string.

	Example:
		#include "vector3.bi"
		using vectors
		dim v as vector3 = (1, 2, 3)
		dim s as string = v
		print s

	Output:
		(1, 2, 3)


Operator - ( vector3 )
----------------------

	Negative unary operator '-'

		{v} = -{a}

	Returns negative of vector {a} in {v}

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim v as vector3
		v = -a
		print v
	
	Output:
		(-1, -2, -3)


{v}.dot( vector3, vector3 )
---------------------------

	Dot product of two vectors

		d = {a} . {b}

	Compute the scalar dot product of {a} dot {b}.
		d = a.x * b.x + a.y * b.y

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (5, 7, 11)
		dim d as real
		d = a.dot( b )
		print d
	
	Output:
		 52


Operator * ( vector3, vector3 )
-------------------------------

	Dot product of two vectors

		d = {a} . {b}

	Compute the scalar dot product of {a} dot {b}.
		d = a.x * b.x + a.y * b.y

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (5, 7, 11)
		dim d as real
		d = a * b
		print d
	
	Output:
		 52


{v}.scale( vector3 )
--------------------

	Entrywise product of vectors
	
		{v} = {v} o {a}

	Compute the multiplication for each component
		v.x *= a.x
		v.y *= a.y
		v.z *= a.z

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim b as vector3 = (5, 7, 11)
		dim v as vector3
		v = a.scale( b )
		print v
	
	Output:
		(5, 14, 33)


{v}.scale( scalar )
-------------------

	Multiply (scale) vector by a scalar

		{v} = {a} * k

	Multiply vector {a} by scalar k and return in {v}
		v.x = a.x * k
		v.y = a.y * k
		v.z = a.z * k

	Example:
		#include "vector3.bi"
		using vectors
		dim a as vector3 = (1, 2, 3)
		dim v as vector3
		v = a.scale( -3 )
		print v

	Output:
		(-3, -6, -9)
