	vector - geometric vector library
	Copyright (C) 2018 Jeffery R. Marshall (coder[at]execulink[dot]com)

vector2
=======

	2D geometric vector data type

		Initialize                  {v} = {a}
		                            dim {v} = ( x, y )
		                            {v}.set( x, y )

		Element access              v.x = x
		                            v.y = y

		Element access              {v}.e(0) = x
		                            {v}.e(1) = y

		Add                         {v} = {a} + {b}
		Subtract                    {v} = {a} - {b}

		Multiply by scalar          {v} = {v} * k
		Multiply by scalar          {v} = {a}.scale(k)
		Multiply by scalar          {v} = k * {v}
		Divide by scalar            {v} = {a} / k

		Add & assign                {v} += {a}
		Subtract & assign           {v} -= {a}
		Multiply scalar & assign    {v} *= k
		Divide by scalar & assign   {v} /= k 

		Negative                    {v} = -{a}
		Self Negative               {v}.selfop_neg
		Self Negative equivalent    {v} = -{v}

		Self Zero                   {v}.selfop_zero
		Self Zero equivalent        {v}.set( 0, 0, 0 )

		Scalar Dot Product           d  = {a}.dot({b})
		                                = {a} . {b}

		Cross Product                d  = {a}.cross({b})
		                                = {a} X {b}

		Perp Vector                 {v} = {a}.perp

		Hadamard Product            {v} = {a}.scale({b})
		                                = {a} o {b}

		Magnitude (length)           d  = {a}.magnitude
		                                = |{a}|

		Magnitude squared            d  = {a}.magnitude2
		                                = |{a}|^2

		Distance between points      d  = {a}.distance({b})
		                                = |{b}-{a}|

		Distance squared             d  = {a}.distance2({b})
		                                = |{b}-{a}|^2

		Unit vector                 {v} = {u}.unit( {a} )
		                                = {a}/|{a}|

		Normalize                   {v}.normalize
		Normalize equivalent        {v} = {v}.unit

		Convert to string           var s = cstr( {v} )

		Compare Equality             t  = {a} = {b}
		Compare Inequality           t  = {a} <> {b}
		Compare Zero                 t  = {a}.isZero
		                                = {a} = (0, 0)


type vector2
------------

	type vector2
		union
			type
				x as real
				y as real
			end type
			e(0 to 1) as real
		end union
	end type

	Vector components can be access through either the named
	fields x and y.  Or through the element array e().


Construction
------------

	Create a vector

		dim {v}

	vector data type uses a default and built-in contructor.
	When the variable is defined, components default to zero
	values.
		v.x = 0
		v.y = 0

	Example:
		#include "vector2.bi"
		using vectors
		dim v as vector2
		print v

	Output:
		(0, 0)


Initialization
--------------

	Initialize a vector with component values when it is created

		dim {v} = (x, y)

	Set a vector {v} to component values (x, y) when declaring
	the variable:
		v.x = x
		v.y = y

	Example:
		#include "vector2.bi"
		using vectors
		dim v as vector2 = (1, 2)
		print v

	Output:
		(1, 2)


{v}.Set( x, y )
---------------

	Set vector components

		{v} = (x, y)

	Set a vector {v} to component values (x, y)
		v.x = x
		v.y = y

	Example:
		#include "vector2.bi"
		using vectors
		dim v as vector2
		v.set( 1, 2 )
		print v

	Output:
		(1, 2)


Operator let ( vector2 )
------------------------

	Assignment operator '='

		{v} = {a}

	Set a vector {v} to component values (x, y)
		v.x = x
		v.y = y

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2, v as vector2
		a.set( 1, 2 )
		v = a
		print v

	Output:
		(1, 2)


Operator + ( vector2, vector2 )
-------------------------------

	Addition binary operator '+'

		{v} = {a} + {b}

	Add vector {a} to vector {b} and return in {v}
		v.x = a.x + b.x
		v.y = a.y + b.y

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim b as vector2 = (3, 5)
		dim v as vector2
		v = a + b
		print v

	Output:
		(4, 7)


Operator += ( vector2 )
-----------------------

	Addition and assignment operator '+='
	
		{v} += {a}

	Add vector {a} to vector {v} and return in {v}
		v.x += a.x
		v.y += a.y

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim b as vector2 = (3, 5)
		dim v as vector2
		v += a
		print v
		v += b
		print v

	Output:
		(1, 2)
		(4, 7)


Operator - ( vector2, vector2 )
-------------------------------

	Subtraction binary operator '-'

		{v} = {a} - {b}

	subtract vector {a} from vector {b} and return in {v}
		v.x = a.x - b.x
		v.y = a.y - b.y

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim b as vector2 = (3, 5)
		dim v as vector2
		v = a - b
		print v

	Output:
		(-2, -3)


Operator -= ( vector2 )
-----------------------

	Subtraction and assignment operator '-='
		
		{v} -= {a}

	Subtract vector {a} from vector {v} and return in {v}
		v.x -= a.x
		v.y -= a.y

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim b as vector2 = (3, 5)
		dim v as vector2
		v -= a
		print v
		v -= b
		print v

	Output:
		(-1, -2)
		(-4, -7)


Operator * ( scalar, vector2 )
------------------------------

	Multiply (scale) vector by scalar binary operator '*'

		{v} = k * {a}

	Multiply vector {a} by scalar k and return in {v}
		v.x = k * a.x
		v.y = k * a.y

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim v as vector2
		v = -3 * a
		print v

	Output:
		(-3, -6)


Operator * ( vector2, scalar )
------------------------------

	Multiply (scale) vector by scalar binary operator '*'

		{v} = {a} * k

	Multiply vector {a} by scalar k and return in {v}
		v.x = k * a.x
		v.y = k * a.y

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim v as vector2
		v = a * -3
		print v

	Output:
		(-3, -6)

Operator *= ( scalar )
----------------------

	Multiply (scale) and assignment operator '*='

		{v} *= k

	Multiply vector {v} by scalar k and return in {v}
		v.x *= k
		v.y *= k

	Example:
		#include "vector2.bi"
		using vectors
		dim v as vector2 = (1, 2)
		v *= -3
		print v

	Output:
		(-3, -6)


Operator / ( vector2, scalar )
------------------------------

	Multiply (scale) and assignment operator '*='

		{v} *= k

	Multiply vector {v} by scalar k and return in {v}
		v.x *= k
		v.y *= k

	Example:
		#include "vector2.bi"
		using vectors
		dim v as vector2 = (1, 2)
		v *= -3
		print v

	Output:
		(-3, -6)


Operator /= ( scalar )
----------------------

	Divide (scale) and assignment operator '/='

		{v} /= k

	Divide vector {v} by scalar k and return in {v}
		v.x /= k
		v.y /= k

	Example:
		#include "vector2.bi"
		using vectors
		dim v as vector2 = (4, -6)
		v /= 2
		print v

	Output:
		(2, -3)


{v}.magnitude
-------------

	Return the magnitude of a vector

		d = | {a} |

	Compute the magnitude (length) of {v}
		d = sqr( v.x ^ 2 + v.y ^ 2 )

	Example:
		#include "vector2.bi"
		using vectors
		dim v as vector2 = (3, 4)
		dim d as real
		d = v.magnitude
		print "v   = "; v
		print "|v| = "; d

	Output:
		v   = (3, 4)
		|v| =  5


{v}.magnitude2
--------------

	Return the magnitude squared of a vector

		d = | {v} | ^ 2

	Compute the magnitude of {v} squared
		d = v.x ^ 2 + v.y ^ 2

	Example:
		#include "vector2.bi"
		using vectors
		dim v as vector2 = (3, 4)
		dim d as real
		d = v.magnitude2
		print "v   = "; v
		print "|v| = "; d

	Output:
		v   = (3, 4)
		|v| =  25


{v}.distance( vector2 )
-----------------------

	Return the distance between two vectors

		d = | {b} - {v} |

	Compute the scalar distance from {v} to {b}
		d = sqr( (b.x - v.x) ^ 2 + (b.y - v.y) ^ 2 )

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim b as vector2 = (4, 6)
		print a.distance( b )

	Output:
		 5


{v}.distance2( vector2 )
------------------------

	Return the distance squared between two vectors

		d = | {b} - {v} |

	Compute the scalar distance from {v} to {b} sqaured
		d = (b.x - v.x) ^ 2 + (b.y - v.y) ^ 2

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim b as vector2 = (4, 6)
		print a.distance2( b )

	Output:
		 25

		
{v}.unit( vector2 )
-------------------

	Return the unit vector

		{v} = {a} / |{a}|

	Returns the unit vector {a} in {v}.  if {a} is (0, 0) then the
	zero vector is returned.

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (8.660254, 5)
		dim v as vector2
		v = a.unit
		print v
	
	Output:
		(0.8660254, 0.5)


{v}.normalize
-------------

	Normalize a vector

		{v} = {v} / |{v}|

	Returns the unit vector {v} in {v}.  if {v} is (0, 0) then the
	zero vector is returned.

	Example:
		#include "vector2.bi"
		using vectors
		dim v as vector2 = (8.660254, 5)
		v.normalize
		print v
	
	Output:
		(0.8660254, 0.5)


{v}.selfop_neg
--------------

	Negative of a vector

		{v} = -{v}

	Returns negative of vector {v} in {v}

	Example:
		#include "vector2.bi"
		using vectors
		dim v as vector2 = (1, 2)
		v.selfop_neg
		print v
	
	Output:
		(-1, -2)

		
{v}.selfop_zero
---------------

	Zero a vector	

		{v} = (0, 0)

	Sets {v} to the zero vector
		v.x = 0
		v.y = 0

	Example:
		#include "vector2.bi"
		using vectors
		dim v as vector2 = (1, 2)
		v.selfop_zero
		print v
	
	Output:
		(0, 0)


{v}.cast() as string
--------------------

	String representation of a vector

		cstr( {v} )

	Converts vector {v} to a string.

	Example:
		#include "vector2.bi"
		using vectors
		dim v as vector2 = (1, 2)
		dim s as string = v
		print s

	Output:
		(1, 2)


Operator - ( vector2 )
----------------------

	Negative unary operator '-'

		{v} = -{a}

	Returns negative of vector {a} in {v}

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim v as vector2
		v = -a
		print v
	
	Output:
		(-1, -2)
		

{v}.dot( vector2, vector2 )
---------------------------

	Dot product of two vectors

		d = {a}.dot({b})
		  = {a} . {b}
		  
	Compute the scalar dot product of {a} dot {b}.
		d = a.x * b.x + a.y * b.y

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim b as vector2 = (3, 5)
		dim d as real
		d = a.dot(b)
		print d
	
	Output:
		 13


Operator * ( vector2, vector2 )
-------------------------------

	Dot product of two vectors

		d = {a} . {b}

	Compute the scalar dot product of {a} dot {b}.
		d = a.x * b.x + a.y * b.y

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim b as vector2 = (3, 5)
		dim d as real
		d = a * b
		print d
	
	Output:
		 13


{v}.perp
--------
	
	Perpendicular of a vector

		{r} = {a}.perp

	Compute perpendicular vector to {a} and return in vector {r}
	Rotates vector {a} 90 degrees (1/4 turn) counter-clockwise and
	returns the result in {r}.  
		r.x = -a.y
		r.y =  a.x

	Equivalent to rotation transoformation:
		{r} = [ 0  -1 ] * [ a.x ]
			  [ 1   0 ]   [ a.y ]

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim v as vector2
		v = a.perp
		print v
	
	Output:
		(-2, 1)


{v}.cross( vector2 )
--------------------
	
	Cross product of two vectors

		d = {a}.cross({b})
		  = {a} X {b}

	Compute the cross product {a} X {b} and return in d.
		d = a.x * b.y - a.y * b.x

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim b as vector2 = (2, 1)
		dim d as real
		d = a.cross(b)
		print d
	
	Output:
		-3


{v}.scale( vector2 )
--------------------

	Entrywise product of vectors
	
		{v} = {v} o {a}

	Compute the multiplication for each component
		v.x *= a.x
		v.y *= a.y

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim b as vector2 = (5, 7)
		dim v as vector2
		v = a.scale( b )
		print v
	
	Output:
		(5, 14)


{v}.scale( scalar )
-------------------

	Multiply (scale) vector by a scalar

		{v} = {a} * k

	Multiply vector {a} by scalar k and return in {v}
		v.x = a.x * k
		v.y = a.y * k

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim v as vector2
		v = a.scale( -3 )
		print v

	Output:
		(-3, -6)


Operator = ( vector2, vector2 )
-------------------------------

	Compare two vectors for equality (exact)

		result = {a} = {b}

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim b as vector2 = (1, 2)
		dim c as vector2 = (3, 4)
		print (a = b)
		print (a = c)
	
	Output:
		true
		false


Operator <> ( vector2, vector2 )
-------------------------------

	Compare two vectors for inequality

		result = {a} <> {b}

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2 = (1, 2)
		dim b as vector2 = (1, 2)
		dim c as vector2 = (3, 4)
		print (a <> b)
		print (a <> c)
	
	Output:
		false
		true


{v}.isZero
----------

	Test for (exact) equality to zero vector (0, 0)

		result = {a}.isZero

	Example:
		#include "vector2.bi"
		using vectors
		dim a as vector2
		dim b as vector2 = (0, 0)
		dim c as vector2 = (1, 2)
		print a.isZero
		print b.isZero
		print c.isZero
	
	Output:
		true
		true
		false

